{"version":3,"file":"static/js/170.f2fd4caa.chunk.js","mappings":"0LACA,QAAwB,qBAAxB,EAA0D,0BAA1D,EAA+F,wBAA/F,EAAmI,yBAAnI,EAAyK,0BAAzK,EAAiN,2BAAjN,EAAuP,wBAAvP,EAA2R,yBAA3R,EAA6T,sBAA7T,EAA8V,wBAA9V,EAA0Y,iCAA1Y,EAAkb,oBAAlb,EAAod,2BAApd,EAA+f,6BAA/f,EAA0iB,2BAA1iB,EAAglB,wB,sBCCzkB,MAeMA,EAAaC,GACfA,EAAMC,UAAUC,O,aCEpB,MAAMC,EAAkCC,IAAoC,IAAnC,QAACC,EAAO,aAAEC,EAAY,KAAEC,GAAKH,EAEzE,MAAMF,GAASM,EAAAA,EAAAA,GAAeT,IAExB,SACFU,EAAQ,aACRC,IACAC,EAAAA,EAAAA,IAAkB,CAClBC,KAAM,WACNC,OAAQ,CAACC,KAAMZ,EAAOY,KAAMC,OAAQC,OAAOd,EAAOa,WAgBtD,OACIE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,UAC1BC,EAAAA,EAAAA,MAAA,QAAMC,SAAUZ,GAVNG,IALMX,KACpBG,EAAQ,GACRC,EAAaC,EAAML,EAAO,EAQ1BqB,CAJ2B,CACvBT,KAAMD,EAAOC,KACbC,OAA0B,SAAlBF,EAAOE,OAAoB,KAAyB,SAAlBF,EAAOE,QAE/B,IAKqBK,SAAA,EACnCH,EAAAA,EAAAA,KAAA,SAAOO,aAAa,SAAUf,EAAS,OAAQ,CAAC,MAChDY,EAAAA,EAAAA,MAAA,aAAYZ,EAAS,SAAU,CAAC,GAAEW,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAML,SAAC,SACrBH,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAML,SAAC,iBACrBH,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,QAAOL,SAAC,yBAG5B,EC1CDM,EAAuCtB,IAA2D,IAA1D,QAACC,EAAO,KAAEE,EAAI,SAAEoB,EAAQ,MAAEC,EAAK,QAAEC,EAAO,UAAEC,GAAU1B,EAUrG,OACIiB,EAAAA,EAAAA,MAAAU,EAAAA,SAAA,CAAAX,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAYC,SAAA,CAAC,sBAEzBH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EAAca,KAAK,SAASC,IAAK,EAAGC,IAAKJ,EAAWR,SAZjEa,IACb,IAAIC,EAAIC,OAAOF,EAAEG,OAAOb,OACxBpB,EAAQ+B,IACJA,EAAI,GAAKA,EAAIN,IACbzB,EAAQE,EACZ,QASIc,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAaC,SAAA,EACzBH,EAAAA,EAAAA,KAAA,UACIsB,QAASA,KACLlC,EAAQE,EAAO,GACfoB,EAAS,EAAE,EAEfT,UAAWC,EAAYqB,SAAUX,GAAoB,IAATtB,EAAWa,SAAC,cAG5DC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAaC,SAAA,CAAC,iBAAeb,MAC7CU,EAAAA,EAAAA,KAAA,UACIsB,QAASA,KACLlC,EAAQE,EAAO,GACfoB,EAAS,EAAE,EAEfT,UAAWC,EAAYqB,SAAUX,GAAWD,EAAMa,OAAS,IAAIrB,SAAC,kBAIzE,EClCEsB,EAAuCtC,IAC4C,IAD3C,eAACuC,EAAc,YAAEC,EAAW,SAAEjB,EAAQ,MAClCC,EAAK,QAAEC,EAAO,MAAEgB,EAAK,UAAEf,GAAU1B,EAEtF,OACIa,EAAAA,EAAAA,KAAA,OAAAG,SACKyB,EAAQjB,EAAMa,QACTxB,EAAAA,EAAAA,KAAA,UAAQsB,QAASA,IAAMZ,EAASkB,EAAQ,IAAK3B,UAAWC,EAAYqB,SAAUX,EAAQT,SACnFS,EAAU,aAAe,eAEzBe,EAAcd,GAAuB,MAAVe,KACzB5B,EAAAA,EAAAA,KAAA,UAAQsB,QAASA,KAAOI,EAAeC,EAAc,GAAGjB,EAAS,EAAE,EAClET,UAAWC,EAAWC,SAAC,cAGjC,E,oBCdP,MAAM0B,EAA2B1C,IAAqB,IAApB,MAACwB,EAAK,MAAEiB,GAAMzC,EAEnD,MAAM2C,GAAcvC,EAAAA,EAAAA,IAAeR,GAASA,EAAMC,UAAU8C,cAEtDC,GAAwBC,EAAAA,EAAAA,MAE9B,OACIhC,EAAAA,EAAAA,KAAAc,EAAAA,SAAA,CAAAX,SACKQ,EAAMsB,MAAM,EAAGL,GAAOM,KAAI,CAACC,EAAGC,KAC3BhC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAWC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,QAAMH,UAAWC,EAASC,SAAA,EACjBH,EAAAA,EAAAA,KAACqC,EAAAA,GAAO,CAACC,GAAI,IAAMH,EAAEI,GAAGpC,UACrBH,EAAAA,EAAAA,KAAA,OAAKwC,IAAKL,EAAEM,OAAOC,MAAQP,EAAEM,OAAOC,MAAQC,EAAAA,EACvCC,IAAI,GACJ3C,UAAWC,OAEhBF,EAAAA,EAAAA,KAAA,UAAQC,UAAS,GAAA4C,OAAK3C,EAAU,KAAA2C,OAAIV,EAAEW,UAAY5C,GAC1CqB,SAAUO,IAAgBK,EAAEI,GAC5BjB,QAASA,IAAMS,GAASe,EAAAA,EAAAA,IAASX,EAAEI,KAAKpC,SACtCgC,EAAEW,SAAW,WAAa,eAGhD1C,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAOC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,WAAcgC,EAAEY,SAE1B3C,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,eACNH,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAA4C,OAAK3C,EAAa,KAAA2C,QAAKV,EAAEW,UAAY5C,SAEvDF,EAAAA,EAAAA,KAAA,QAAAG,SAAM,cAAiBgC,EAAEI,MAEf,OAAbJ,EAAEa,SAAmB5C,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAcC,SAAA,EAChDH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,aAAgBgC,EAAEa,YAxBCZ,MA2BtC,ECtCEa,EAAiBC,EAAAA,MAAW,KAErC,MAAM,MAACvC,EAAK,WAAEwC,EAAU,KAAE7D,EAAI,QAAEsB,EAAO,OAAE3B,IAAUM,EAAAA,EAAAA,IAAeR,GAASA,EAAMC,YAE3E+C,GAAwBC,EAAAA,EAAAA,MAExBoB,EAAkB9D,IACpByC,GAASJ,EAAAA,EAAAA,IAAYrC,GAAM,EAGzB+D,EAAWA,CAAC/D,EAAcL,KAC5B8C,GAAS1C,EAAAA,EAAAA,IAAaC,EAAML,GAAQ,GAGjC2C,EAAOlB,IAAY4C,EAAAA,EAAAA,UAAiB,GACrCzC,EAAY0C,KAAKC,KAAKL,EAAa,MAElCM,EAAcC,IAAmBC,EAAAA,EAAAA,MA2CxC,OAzCAC,EAAAA,EAAAA,YAAU,KAEN,MAAMC,EAAS,CACXvE,KAAMmE,EAAaK,IAAI,QACvBjE,KAAM4D,EAAaK,IAAI,QACvBhE,OAAQ2D,EAAaK,IAAI,WAG7B,IAAIC,EAAazE,EACb0E,EAAe/E,EAEb4E,EAAOvE,OAAMyE,EAAa3C,OAAOyC,EAAOvE,OAC3B,IAAfyE,IAAkBA,EAAazE,GACf,OAAhBuE,EAAOvE,OAAeyE,EAAa,GAGnCC,EADEH,EAAOhE,KACM,IAAImE,EAAcnE,KAAMgE,EAAOhE,MAC5B,IAAImE,EAAcnE,KAAM,IAExB,SAAlBgE,EAAO/D,SAAmBkE,EAAe,IAAIA,EAAclE,OAAQ,OACjD,SAAlB+D,EAAO/D,SAAmBkE,EAAe,IAAIA,EAAclE,QAAQ,IACjD,UAAlB+D,EAAO/D,SAAoBkE,EAAe,IAAIA,EAAclE,QAAQ,IAClD,OAAlB+D,EAAO/D,SAAiBkE,EAAe,IAAIA,EAAclE,OAAQ,OAErEuD,EAASU,EAAYC,EAAa,GAEnC,CAACP,KAGJG,EAAAA,EAAAA,YAAU,KACN,MAAM/D,EAAOZ,EAAOY,KACdC,EAASb,EAAOa,OACtB,IAAImE,GACU,KAATpE,EAAc,GAAE,SAAAgD,OAAYhD,KACf,OAAXC,EAAkB,GAAE,WAAA+C,OAAc/C,KACzB,IAATR,EAAa,GAAE,SAAAuD,OAAYvD,IAElCoE,EAAgBO,EAAS,GAE1B,CAAChF,EAAOK,KAGPc,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAQC,SAAA,EACpBC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAWC,SAAA,EACvBH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,yBACNC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,gBAAcU,MACpBT,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,gBAAcgD,SAExBnD,EAAAA,EAAAA,KAACS,EAAoB,CACjBI,UAAWA,EACXzB,QAASgE,EACT9D,KAAMA,EACNoB,SAAUA,EACVC,MAAOA,EACPC,QAASA,KACbZ,EAAAA,EAAAA,KAACd,EAAe,CACZE,QAASgE,EACT/D,aAAcgE,EACd/D,KAAMA,KACVU,EAAAA,EAAAA,KAAC6B,EAAQ,CACLlB,MAAOA,EACPiB,MAAOA,KACX5B,EAAAA,EAAAA,KAACyB,EAAoB,CACjBC,eAAgB0B,EAChBxB,MAAOA,EACPf,UAAWA,EACXc,YAAarC,EACboB,SAAUA,EACVC,MAAOA,EACPC,QAASA,MACX,G","sources":["webpack://ReactSocialNetwork/./src/components/Users/users.module.css?9211","redux/selectors/users_selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/UsersPagination/UpperBlockPagination.tsx","components/Users/UsersPagination/LowerBlockPagination.tsx","components/Users/UserCard.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"users_users__TTdsI\",\"pagination\":\"users_pagination__Npw4H\",\"infoPage\":\"users_infoPage__NPDb7\",\"pageInput\":\"users_pageInput__lsrhg\",\"numberPage\":\"users_numberPage__t8Pin\",\"usersSearch\":\"users_usersSearch__6+QpO\",\"userItem\":\"users_userItem__4HrV7\",\"userPhoto\":\"users_userPhoto__Nyd6G\",\"follow\":\"users_follow__3zutk\",\"followed\":\"users_followed__cPPnS\",\"followed_unfollow\":\"users_followed_unfollow__wHdb9\",\"info\":\"users_info__9ncw0\",\"stateFollow\":\"users_stateFollow__lEePx\",\"stateUnfollow\":\"users_stateUnfollow__9fIUW\",\"description\":\"users_description__U3-mM\",\"showMore\":\"users_showMore__xGKj5\"};","import {AppStateType} from \"../redux_store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getTotalCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getFollowingId = (state: AppStateType) => {\r\n    return state.usersPage.followingId\r\n}\r\nexport const getPage = (state: AppStateType) => {\r\n    return state.usersPage.page\r\n}\r\nexport const getLoading = (state: AppStateType) => {\r\n    return state.usersPage.loading\r\n}\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport s from \"./users.module.css\";\r\nimport {FilterType} from \"../../redux/usersSlice\";\r\nimport {getFilter} from \"../../redux/selectors/users_selectors\";\r\nimport {useAppSelector} from \"../../redux/redux_store\";\r\n\r\ntype PropsTypes = {\r\n    setPage: (page: number) => void\r\n    requestUsers: (page: number, filter: FilterType) => void\r\n    page: number\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsTypes> = ({setPage, requestUsers, page}) => {\r\n\r\n    const filter = useAppSelector(getFilter)\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n    } = useForm<FormType>({\r\n        mode: \"onChange\",\r\n        values: {term: filter.term, friend: String(filter.friend) as FriendFormType},\r\n    });\r\n\r\n    const onFilterChange = (filter: FilterType) => {\r\n        setPage(1)\r\n        requestUsers(page, filter)\r\n    }\r\n\r\n    const onChange = (values: FormType) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        onFilterChange(filter)\r\n    }\r\n\r\n    return (\r\n        <div className={s.usersSearch}>\r\n            <form onChange={handleSubmit(onChange)}>\r\n                <input autoComplete='off' {...register(\"term\", {})}/>\r\n                <select {...register(\"friend\", {})}>\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Only follow</option>\r\n                    <option value=\"false\">Only unfollow</option>\r\n                </select>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import s from \"../users.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../../redux/types/types\";\r\n\r\ntype PropsTypes = {\r\n    loading: boolean\r\n    users: UsersType[]\r\n    page: number\r\n    totalPage: number\r\n    setPage: (page: number) => void\r\n    setCount: (count: number) => void\r\n}\r\n\r\nexport const UpperBlockPagination: FC<PropsTypes> = ({setPage, page, setCount, users, loading, totalPage}) => {\r\n\r\n    const getPage = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let n = Number(e.target.value)\r\n        setPage(n)\r\n        if (n < 1 || n > totalPage) {\r\n            setPage(page)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.pageInput}>\r\n                Input page number:\r\n                <input className={s.numberPage} type=\"number\" min={1} max={totalPage} onChange={getPage}/>\r\n            </div>\r\n            <div className={s.pagination}>\r\n                <button\r\n                    onClick={() => {\r\n                        setPage(page - 1);\r\n                        setCount(4)\r\n                    }}\r\n                    className={s.showMore} disabled={loading || page === 1}>\r\n                    PrevPage\r\n                </button>\r\n                <div className={s.numberPage}>Current page: {page}</div>\r\n                <button\r\n                    onClick={() => {\r\n                        setPage(page + 1);\r\n                        setCount(4)\r\n                    }}\r\n                    className={s.showMore} disabled={loading || users.length < 100}>\r\n                    NextPage\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import s from \"../users.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../../redux/types/types\";\r\n\r\ntype PropsTypes = {\r\n    loading: boolean\r\n    users: UsersType[]\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setCount: (count: number) => void\r\n    count: number\r\n    totalPage: number\r\n}\r\n\r\nexport const LowerBlockPagination: FC<PropsTypes> = ({setCurrentPage, currentPage, setCount,\r\n                                                         users, loading, count, totalPage}) => {\r\n\r\n    return (\r\n        <div >\r\n            {count < users.length\r\n                ? <button onClick={() => setCount(count + 10)} className={s.showMore} disabled={loading}>\r\n                    {loading ? \"Loading...\" : \"Load more\"}\r\n                </button>\r\n                : ( (currentPage < totalPage || count === 100)\r\n                    && <button onClick={() => {setCurrentPage(currentPage + 1);setCount(4)}}\r\n                        className={s.showMore}>\r\n                        NextPage\r\n                        </button>)}\r\n        </div>\r\n    )\r\n}","import s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../assets/images/avatar.svg\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../redux/types/types\";\r\nimport {AppDispatch, useAppSelector} from \"../../redux/redux_store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {followed} from \"../../redux/usersSlice\";\r\n\r\ntype PropsTypes = {\r\n    users: UsersType[]\r\n    count: number\r\n}\r\n\r\nexport const UserCard: FC<PropsTypes> = ({users, count}) => {\r\n\r\n    const followingId = useAppSelector(state => state.usersPage.followingId)\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    return (\r\n        <>\r\n            {users.slice(0, count).map((u, i) =>\r\n                <div className={s.userItem} key={i}>\r\n                    <span className={s.follow}>\r\n                             <NavLink to={'/' + u.id}>\r\n                                <img src={u.photos.small ? u.photos.small : avatar}\r\n                                     alt=''\r\n                                     className={s.userPhoto}/>\r\n                             </NavLink>\r\n                                <button className={`${s.followed} ${u.followed && s.followed_unfollow}`}\r\n                                        disabled={followingId === u.id}\r\n                                        onClick={() => dispatch(followed(u.id))}>\r\n                                         {u.followed ? \"Unfollow\" : \"Follow\"}\r\n                                 </button>\r\n                     </span>\r\n                    <div className={s.info}>\r\n                        <div>\r\n                            <span>Name: </span>{u.name}\r\n                        </div>\r\n                        <div>\r\n                            <span>Followed:</span>\r\n                            <div className={`${s.stateFollow} ${!u.followed && s.stateUnfollow}`}></div>\r\n                        </div>\r\n                        <span>User id: </span>{u.id}\r\n                    </div>\r\n                    {u.status !== null && <div className={s.description}>\r\n                        <span>Status: </span>{u.status}</div>}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {currentPage, FilterType, requestUsers} from \"../../redux/usersSlice\";\r\nimport s from \"./users.module.css\";\r\nimport {AppDispatch, useAppSelector} from \"../../redux/redux_store\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {UpperBlockPagination} from \"./UsersPagination/UpperBlockPagination\";\r\nimport {LowerBlockPagination} from \"./UsersPagination/LowerBlockPagination\";\r\nimport {UserCard} from \"./UserCard\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\n\r\n\r\nexport const UsersContainer = React.memo(() => {\r\n\r\n    const {users, totalCount, page, loading, filter} = useAppSelector(state => state.usersPage)\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const getCurrentPage = (page: number) => {\r\n        dispatch(currentPage(page))\r\n    }\r\n\r\n    const reqUsers = (page: number, filter: FilterType) => {\r\n        dispatch(requestUsers(page, filter))\r\n    }\r\n\r\n    const [count, setCount] = useState<number>(4)\r\n    const totalPage = Math.ceil(totalCount / 100)\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n\r\n        const parsed = {\r\n            page: searchParams.get(\"page\") as string,\r\n            term: searchParams.get(\"term\") as string,\r\n            friend: searchParams.get(\"friend\") as string\r\n        }\r\n\r\n        let actualPage = page\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (actualPage === 0) actualPage = page\r\n        if (parsed.page === null) actualPage = 1\r\n\r\n        if (!!parsed.term) {\r\n            actualFilter = {...actualFilter, term: parsed.term}\r\n        } else actualFilter = {...actualFilter, term: ''}\r\n\r\n        if (parsed.friend === \"null\") actualFilter = {...actualFilter, friend: null}\r\n        if (parsed.friend === \"true\") actualFilter = {...actualFilter, friend: true}\r\n        if (parsed.friend === \"false\") actualFilter = {...actualFilter, friend: false}\r\n        if (parsed.friend === null) actualFilter = {...actualFilter, friend: null}\r\n\r\n        reqUsers(actualPage, actualFilter)\r\n\r\n    }, [searchParams]);\r\n\r\n\r\n    useEffect(() => {\r\n        const term = filter.term\r\n        const friend = filter.friend\r\n        let urlQuery =\r\n            (term === '' ? '' : `&term=${term}`)\r\n            + (friend === null ? '' : `&friend=${friend}`)\r\n            + (page === 1 ? '' : `&page=${page}`)\r\n\r\n        setSearchParams(urlQuery)\r\n\r\n    }, [filter,page]);\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <div className={s.infoPage}>\r\n                <span>Users per page: 100</span>\r\n                <span>Total pages: {totalPage}</span>\r\n                <span>Total users: {totalCount}</span>\r\n            </div>\r\n            <UpperBlockPagination\r\n                totalPage={totalPage}\r\n                setPage={getCurrentPage}\r\n                page={page}\r\n                setCount={setCount}\r\n                users={users}\r\n                loading={loading}/>\r\n            <UsersSearchForm\r\n                setPage={getCurrentPage}\r\n                requestUsers={reqUsers}\r\n                page={page}/>\r\n            <UserCard\r\n                users={users}\r\n                count={count}/>\r\n            <LowerBlockPagination\r\n                setCurrentPage={getCurrentPage}\r\n                count={count}\r\n                totalPage={totalPage}\r\n                currentPage={page}\r\n                setCount={setCount}\r\n                users={users}\r\n                loading={loading}/>\r\n        </div>\r\n    )\r\n})\r\n"],"names":["getFilter","state","usersPage","filter","UsersSearchForm","_ref","setPage","requestUsers","page","useAppSelector","register","handleSubmit","useForm","mode","values","term","friend","String","_jsx","className","s","children","_jsxs","onChange","onFilterChange","autoComplete","value","UpperBlockPagination","setCount","users","loading","totalPage","_Fragment","type","min","max","e","n","Number","target","onClick","disabled","length","LowerBlockPagination","setCurrentPage","currentPage","count","UserCard","followingId","dispatch","useDispatch","slice","map","u","i","NavLink","to","id","src","photos","small","avatar","alt","concat","followed","name","status","UsersContainer","React","totalCount","getCurrentPage","reqUsers","useState","Math","ceil","searchParams","setSearchParams","useSearchParams","useEffect","parsed","get","actualPage","actualFilter","urlQuery"],"sourceRoot":""}