{"version":3,"file":"static/js/586.167f9fa7.chunk.js","mappings":"mLACA,SAAgB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,sBAAsB,SAAW,wBAAwB,kBAAoB,iCAAiC,KAAO,oBAAoB,YAAc,2BAA2B,cAAgB,6BAA6B,YAAc,2BAA2B,SAAW,yBCCvWA,EAAYC,GACdA,EAAMC,UAAUC,MAGdC,EAA0BH,GAC5BA,EAAMC,UAAUG,oB,oBCL3B,MAAMC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAINC,EAAY,CACrBZ,SAASa,GACEP,EAASQ,IAAI,eAADC,OAAgBF,IAEvCG,YAAYC,GACDX,EAASQ,IAAI,UAADC,OAAWE,GAAU,CAAC,GAE7CC,SAASD,GACEX,EAASa,OAAO,UAADJ,OAAWE,GAAU,CAAC,GAEhDG,OAAOH,GACIX,EAASe,KAAK,UAADN,OAAWE,GAAU,CAAC,EAAG,CAAC,I,aCiFtD,SAAeK,EAAAA,EAAAA,KAVQrB,IACZ,CACHY,MAAOZ,EAAMC,UAAUW,MACvBU,QAAStB,EAAMC,UAAUqB,QACzBC,WAAYvB,EAAMC,UAAUsB,WAC5BrB,MAAOH,EAASC,GAChBI,oBAAqBD,EAAuBH,MAKhD,CAACwB,SAAQ,KAAEC,aAAY,MAD3B,EA5EuCC,IAEnC,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAsB,KACvCjB,EAAOkB,IAAYD,EAAAA,EAAAA,UAAS,IAO5BL,EAAUO,IAAeF,EAAAA,EAAAA,WAAkB,IAC3CG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,CAACb,OAAQ,OAexD,OAJAkB,EAAAA,EAAAA,YAAU,KAjBOC,WACb,MAAMC,QAAiBzB,EAASZ,SAASa,GACzCgB,EAAQQ,EAAIT,KAAKU,MAAM,EAgBvBtC,CAASa,EAAM,GAChB,CAACA,EAAOY,KAGPc,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEtC,MAAMuC,SAAA,CACnBd,EAAKe,KAAKC,IACPL,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEI,SAASH,SAAA,EACvBH,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAErB,OAAOsB,SAAA,EACjBI,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,GAAI,IAAMJ,EAAEK,GAAGP,UACrBI,EAAAA,EAAAA,KAAA,OAAKI,IAAuB,MAAlBN,EAAEO,OAAOC,MAAgBR,EAAEO,OAAOC,MAAQC,EAAAA,EAC/CC,IAAI,GACJd,UAAWC,EAAEc,eAElBT,EAAAA,EAAAA,KAAA,UAAQN,UAAS,GAAAzB,OAAK0B,EAAEhB,SAAQ,KAAAV,OAAI6B,EAAEnB,UAAYgB,EAAEe,mBAC5CC,SAAUxB,EAAYhB,SAAW2B,EAAEK,GACnCS,QAASA,IAzBxBtB,WACjBF,EAAe,CAACjB,OAAQA,IACxB,IAAIoB,QAAiBzB,EAASI,YAAYC,GAC1Ce,EAAYK,EAAIT,MACMS,GAAR,IAAbA,EAAIT,WAA6BhB,EAASQ,OAAOH,SAAsBL,EAASM,SAASD,GACjE,IAAxBoB,EAAIT,KAAK+B,YAAoB3B,GAAaP,GAC3CS,EAAe,CAACjB,OAAQ,MAAM,EAmBiB2C,CAAahB,EAAEK,IAAIP,SAChCE,EAAEnB,SAAW,WAAa,eAGhDc,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEoB,KAAKnB,SAAA,EACnBH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACII,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,WAAcE,EAAEkB,SAE1BvB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACII,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,eACNI,EAAAA,EAAAA,KAAA,OAAKN,UAAS,GAAAzB,OAAK0B,EAAEsB,YAAW,KAAAhD,QAAK6B,EAAEnB,UAAYgB,EAAEuB,qBAEzDlB,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,cAAiBE,EAAEK,MAEf,OAAbL,EAAEqB,SAAmB1B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEyB,YAAYxB,SAAA,EAChDI,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,aAAgBE,EAAEqB,YAxBCrB,EAAEK,OA2BvCH,EAAAA,EAAAA,KAAA,OAAAJ,UACII,EAAAA,EAAAA,KAAA,UACIY,QAASA,IAAM3B,GAASlB,GAASA,EAAQ,IAAI2B,UAAWC,EAAE0B,SAAUV,SAAU9B,EAAMJ,QAAQmB,SAC3Ff,EAAMJ,QAAU,aAAe,kBAGtC,G","sources":["webpack://ReactSocialNetwork/./src/components/Users/Users.module.css?b9d0","redux/users_selectors.ts","api/UsersAPI.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userItem\":\"Users_userItem__wX4gC\",\"userPhoto\":\"Users_userPhoto__0hFuF\",\"follow\":\"Users_follow__g0azf\",\"followed\":\"Users_followed__iwrLF\",\"followed_unfollow\":\"Users_followed_unfollow__cDCHo\",\"info\":\"Users_info__3XOHj\",\"stateFollow\":\"Users_stateFollow__D6VE2\",\"stateUnfollow\":\"Users_stateUnfollow__GXIbH\",\"description\":\"Users_description__mkOV+\",\"showMore\":\"Users_showMore__BhhDM\"};","import {AppStateType} from \"./redux_store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"80f7eb98-d03d-4e4e-bcc2-ee3aa206800e\"\r\n    }\r\n});\r\n\r\nexport const usersAPI =  {\r\n    getUsers(count: number) {\r\n        return instanse.get(`users?count=${count}`)\r\n    },\r\n    getFollowed(userId: number) {\r\n        return instanse.get(`follow/${userId}`, {});\r\n    },\r\n    unfollow(userId: number) {\r\n        return instanse.delete(`follow/${userId}`, {});\r\n    },\r\n    follow(userId: number) {\r\n        return instanse.post(`follow/${userId}`, {}, {});\r\n    },\r\n    // getSearch(total: number) {\r\n    //     return instanse.get(`users?page=1`, {totalCount: total})\r\n    // },\r\n}","import React, {FC,  useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {followed, requestUsers} from \"../../redux/usersReducer\";\r\nimport s from \"./Users.module.css\";\r\nimport {getFollowingInProgress, getUsers,} from \"../../redux/users_selectors\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../assets/images/avatar.svg\";\r\nimport {UsersType} from \"../../redux/types/types\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {usersAPI} from \"../../api/UsersAPI\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    count: number\r\n    loading: boolean\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    followed: (id: number) => void\r\n    requestUsers(count: number): void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst UsersContainer: FC<PropsType> = (props: PropsType) => {\r\n\r\n    const [data, setData] = useState<UsersType[]>([])\r\n    const [count, setCount] = useState(5)\r\n\r\n    const getUsers = async (count: number) => {\r\n        const res: any = await usersAPI.getUsers(count)\r\n        setData(res.data.items)\r\n    }\r\n\r\n    const [followed, setFollowed] = useState<boolean>(false)\r\n    const [expectation, setExpectation] = useState({userId: null as null | number})\r\n\r\n    const followedUser = async (userId: number) => {\r\n        setExpectation({userId: userId})\r\n        let res: any = await usersAPI.getFollowed(userId)\r\n        setFollowed(res.data)\r\n        {res.data === false ? res = await usersAPI.follow(userId) : res = await usersAPI.unfollow(userId)}\r\n        {res.data.resultCode === 0 && setFollowed(!followed)}\r\n        setExpectation({userId: null})\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsers(count)\r\n    }, [count, followed]);\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            {data.map((u) =>\r\n                <div className={s.userItem} key={u.id}>\r\n                    <span className={s.follow}>\r\n                             <NavLink to={'/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : avatar}\r\n                                     alt=''\r\n                                     className={s.userPhoto}/>\r\n                             </NavLink>\r\n                                <button className={`${s.followed} ${u.followed && s.followed_unfollow}`}\r\n                                        disabled={expectation.userId === u.id}\r\n                                        onClick={() => followedUser(u.id)}>\r\n                                         {u.followed ? \"Unfollow\" : \"Follow\"}\r\n                                 </button>\r\n                     </span>\r\n                    <div className={s.info}>\r\n                        <div>\r\n                            <span>Name: </span>{u.name}\r\n                        </div>\r\n                        <div>\r\n                            <span>Followed:</span>\r\n                            <div className={`${s.stateFollow} ${!u.followed && s.stateUnfollow}`}></div>\r\n                        </div>\r\n                        <span>User id: </span>{u.id}\r\n                    </div>\r\n                    {u.status !== null && <div className={s.description}>\r\n                        <span>Status: </span>{u.status}</div>}\r\n                </div>\r\n            )}\r\n            <div>\r\n                <button\r\n                    onClick={() => setCount(count => count + 6)} className={s.showMore} disabled={props.loading}>\r\n                    {props.loading ? \"Loading...\" : \"Load More\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        count: state.usersPage.count,\r\n        loading: state.usersPage.loading,\r\n        isFetching: state.usersPage.isFetching,\r\n        users: getUsers(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, null, AppStateType>(mapStateToProps,\r\n    {followed, requestUsers})(UsersContainer);"],"names":["getUsers","state","usersPage","users","getFollowingInProgress","followingInProgress","instanse","axios","create","withCredentials","baseURL","headers","usersAPI","count","get","concat","getFollowed","userId","unfollow","delete","follow","post","connect","loading","isFetching","followed","requestUsers","props","data","setData","useState","setCount","setFollowed","expectation","setExpectation","useEffect","async","res","items","_jsxs","className","s","children","map","u","userItem","_jsx","NavLink","to","id","src","photos","small","avatar","alt","userPhoto","followed_unfollow","disabled","onClick","resultCode","followedUser","info","name","stateFollow","stateUnfollow","status","description","showMore"],"sourceRoot":""}