{"version":3,"file":"static/js/170.537d0d0a.chunk.js","mappings":"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","sources":["webpack://ReactSocialNetwork/./src/components/Users/users.module.css?9211","redux/selectors/users_selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/UsersPagination/UpperBlockPagination.tsx","components/Users/UsersPagination/LowerBlockPagination.tsx","components/Users/UserCard.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"users_pagination__Npw4H\",\"infoPage\":\"users_infoPage__NPDb7\",\"pageInput\":\"users_pageInput__lsrhg\",\"numberPage\":\"users_numberPage__t8Pin\",\"usersSearch\":\"users_usersSearch__6+QpO\",\"userItem\":\"users_userItem__4HrV7\",\"userPhoto\":\"users_userPhoto__Nyd6G\",\"follow\":\"users_follow__3zutk\",\"followed\":\"users_followed__cPPnS\",\"followed_unfollow\":\"users_followed_unfollow__wHdb9\",\"info\":\"users_info__9ncw0\",\"stateFollow\":\"users_stateFollow__lEePx\",\"stateUnfollow\":\"users_stateUnfollow__9fIUW\",\"description\":\"users_description__U3-mM\",\"showMore\":\"users_showMore__xGKj5\"};","import {AppStateType} from \"../redux_store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getTotalCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getFollowingId = (state: AppStateType) => {\r\n    return state.usersPage.followingId\r\n}\r\nexport const getPage = (state: AppStateType) => {\r\n    return state.usersPage.page\r\n}\r\nexport const getLoading = (state: AppStateType) => {\r\n    return state.usersPage.loading\r\n}\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport s from \"./users.module.css\";\r\nimport {FilterType} from \"../../redux/usersReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFilter} from \"../../redux/selectors/users_selectors\";\r\n\r\ntype PropsTypes = {\r\n    setPage: (page: number) => void\r\n    requestUsers: (page: number, filter: FilterType) => void\r\n    page: number\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsTypes> = ({setPage, requestUsers, page}) => {\r\n\r\n    const filter = useSelector(getFilter)\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n    } = useForm<FormType>({\r\n        mode: \"onChange\",\r\n        values: {term: filter.term, friend: String(filter.friend) as FriendFormType}\r\n        // defaultValues: {term: filter.term, friend: String(filter.friend) as FriendFormType}\r\n    });\r\n\r\n    const onFilterChange = (filter: FilterType) => {\r\n        setPage(1)\r\n        requestUsers(page, filter)\r\n    }\r\n\r\n    const onChange = (values: FormType) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        onFilterChange(filter)\r\n    }\r\n\r\n    return (\r\n        <div className={s.usersSearch}>\r\n            <form onChange={handleSubmit(onChange)}>\r\n                <input autoComplete='off' {...register(\"term\", {})}/>\r\n                <select {...register(\"friend\", {})}>\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Only follow</option>\r\n                    <option value=\"false\">Only unfollow</option>\r\n                </select>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import s from \"../users.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../../redux/types/types\";\r\n\r\ntype PropsTypes = {\r\n    loading: boolean\r\n    users: UsersType[]\r\n    page: number\r\n    totalPage: number\r\n    setPage: (page: number) => void\r\n    setCount: (count: number) => void\r\n}\r\n\r\nexport const UpperBlockPagination: FC<PropsTypes> = ({setPage, page, setCount, users, loading, totalPage}) => {\r\n\r\n    const getPage = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let n = Number(e.target.value)\r\n        setPage(n)\r\n        if (n < 1 || n > totalPage) {\r\n            setPage(page)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.pageInput}>\r\n                Input page number:\r\n                <input className={s.numberPage} type=\"number\" min={1} max={totalPage} onChange={getPage}/>\r\n            </div>\r\n            <div className={s.pagination}>\r\n                <button\r\n                    onClick={() => {\r\n                        setPage(page - 1);\r\n                        setCount(4)\r\n                    }}\r\n                    className={s.showMore} disabled={page === 1}>\r\n                    PrevPage\r\n                </button>\r\n                <div className={s.numberPage}>Current page: {page}</div>\r\n                <button\r\n                    onClick={() => {\r\n                        setPage(page + 1);\r\n                        setCount(4)\r\n                    }}\r\n                    className={s.showMore} disabled={loading || users.length < 100}>\r\n                    NextPage\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import s from \"../users.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../../redux/types/types\";\r\n\r\ntype PropsTypes = {\r\n    loading: boolean\r\n    users: UsersType[]\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setCount: (count: number) => void\r\n    count: number\r\n    totalPage: number\r\n}\r\n\r\nexport const LowerBlockPagination: FC<PropsTypes> = ({setCurrentPage, currentPage, setCount,\r\n                                                         users, loading, count, totalPage}) => {\r\n\r\n    return (\r\n        <div >\r\n            {count < users.length\r\n                ? <button onClick={() => setCount(count + 10)} className={s.showMore} disabled={loading}>\r\n                    {loading ? \"Loading...\" : \"Load More\"}\r\n                </button>\r\n                : ( (currentPage < totalPage || count === 100)\r\n                    && <button onClick={() => {setCurrentPage(currentPage + 1);setCount(4)}}\r\n                        className={s.showMore}>\r\n                        NextPage\r\n                        </button>)}\r\n        </div>\r\n    )\r\n}","import s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../assets/images/avatar.svg\";\r\nimport React, {FC} from \"react\";\r\nimport {UsersType} from \"../../redux/types/types\";\r\nimport {AppDispatch} from \"../../redux/redux_store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {followed} from \"../../redux/usersReducer\";\r\nimport {getFollowingId} from \"../../redux/selectors/users_selectors\";\r\n\r\ntype PropsTypes = {\r\n    users: UsersType[]\r\n    count: number\r\n}\r\n\r\nexport const UserCard: FC<PropsTypes> = ({users, count}) => {\r\n\r\n    const followingId = useSelector(getFollowingId)\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    return (\r\n        <>\r\n            {users.slice(0, count).map((u, i) =>\r\n                <div className={s.userItem} key={i}>\r\n                    <span className={s.follow}>\r\n                             <NavLink to={'/' + u.id}>\r\n                                <img src={u.photos.small ? u.photos.small : avatar}\r\n                                     alt=''\r\n                                     className={s.userPhoto}/>\r\n                             </NavLink>\r\n                                <button className={`${s.followed} ${u.followed && s.followed_unfollow}`}\r\n                                        disabled={followingId === u.id}\r\n                                        onClick={() => dispatch(followed(u.id))}>\r\n                                         {u.followed ? \"Unfollow\" : \"Follow\"}\r\n                                 </button>\r\n                     </span>\r\n                    <div className={s.info}>\r\n                        <div>\r\n                            <span>Name: </span>{u.name}\r\n                        </div>\r\n                        <div>\r\n                            <span>Followed:</span>\r\n                            <div className={`${s.stateFollow} ${!u.followed && s.stateUnfollow}`}></div>\r\n                        </div>\r\n                        <span>User id: </span>{u.id}\r\n                    </div>\r\n                    {u.status !== null && <div className={s.description}>\r\n                        <span>Status: </span>{u.status}</div>}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions, FilterType, requestUsers} from \"../../redux/usersReducer\";\r\nimport s from \"./users.module.css\";\r\nimport {AppDispatch} from \"../../redux/redux_store\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {UpperBlockPagination} from \"./UsersPagination/UpperBlockPagination\";\r\nimport {LowerBlockPagination} from \"./UsersPagination/LowerBlockPagination\";\r\nimport {UserCard} from \"./UserCard\";\r\nimport {getFilter, getLoading, getPage, getTotalCount, getUsers} from \"../../redux/selectors/users_selectors\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\n\r\n\r\nexport const UsersContainer = React.memo(() => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalCount = useSelector(getTotalCount)\r\n    const page = useSelector(getPage)\r\n    const loading = useSelector(getLoading)\r\n    const filter = useSelector(getFilter)\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const getCurrentPage = (page: number) => {\r\n        dispatch(actions.setCurrentPage(page))\r\n    }\r\n\r\n    const reqUsers = (page: number, filter: FilterType) => {\r\n        dispatch(requestUsers(page, filter))\r\n    }\r\n\r\n    const [count, setCount] = useState<number>(4)\r\n    // const [currentPage, setCurrentPage] = useState<number>(page)\r\n    const totalPage = Math.ceil(totalCount / 100)\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n\r\n        const parsed = {\r\n            page: searchParams.get(\"page\") as string,\r\n            term: searchParams.get(\"term\") as string,\r\n            friend: searchParams.get(\"friend\") as string\r\n        }\r\n\r\n\r\n        // const parsedPage: string | null = searchParams.get(\"page\")\r\n        // const parsedTerm: string | null = searchParams.get(\"term\")\r\n        // const parsedFriend: string | null | boolean = searchParams.get(\"friend\")\r\n\r\n        let actualPage = page\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term}\r\n        if (parsed.friend === \"null\") actualFilter = {...actualFilter, friend: null}\r\n        if (parsed.friend === \"true\") actualFilter = {...actualFilter, friend: true}\r\n        if (parsed.friend === \"false\") actualFilter = {...actualFilter, friend: false}\r\n        // switch (parsedFriend) {\r\n        //     case 'null':\r\n        //         actualFilter = {...actualFilter, friend: null}\r\n        //         break\r\n        //     case 'true':\r\n        //         actualFilter = {...actualFilter, friend: true}\r\n        //         break\r\n        //     case 'false':\r\n        //         actualFilter = {...actualFilter, friend: false}\r\n        //         break\r\n        // }\r\n\r\n        reqUsers(actualPage, actualFilter)\r\n    }, [searchParams]);\r\n\r\n    useEffect(() => {\r\n        const term = filter.term\r\n        const friend = filter.friend\r\n        let urlQuery =\r\n            (term === '' ? '' : `&term=${term}`)\r\n            + (friend === null ? '' : `&friend=${friend}`)\r\n            + (page === 1 ? '' : `&page=${page}`)\r\n\r\n        setSearchParams(urlQuery)\r\n\r\n    }, [filter,page]);\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <div className={s.infoPage}>\r\n                <span>Users per page: 100</span>\r\n                <span>Total pages: {totalPage}</span>\r\n                <span>Total users: {totalCount}</span>\r\n            </div>\r\n            <UpperBlockPagination\r\n                totalPage={totalPage}\r\n                setPage={getCurrentPage}\r\n                page={page}\r\n                setCount={setCount}\r\n                users={users}\r\n                loading={loading}/>\r\n            <UsersSearchForm\r\n                setPage={getCurrentPage}\r\n                requestUsers={reqUsers}\r\n                page={page}/>\r\n            <UserCard\r\n                users={users}\r\n                count={count}/>\r\n            <LowerBlockPagination\r\n                setCurrentPage={getCurrentPage}\r\n                count={count}\r\n                totalPage={totalPage}\r\n                currentPage={page}\r\n                setCount={setCount}\r\n                users={users}\r\n                loading={loading}/>\r\n        </div>\r\n    )\r\n})\r\n"],"names":["getUsers","state","usersPage","users","getTotalCount","totalCount","getFollowingId","followingId","getPage","page","getLoading","loading","getFilter","filter","UsersSearchForm","_ref","setPage","requestUsers","useSelector","register","handleSubmit","useForm","mode","values","term","friend","String","_jsx","className","s","usersSearch","children","_jsxs","onChange","onFilterChange","autoComplete","value","UpperBlockPagination","setCount","totalPage","_Fragment","pageInput","numberPage","type","min","max","e","n","Number","target","pagination","onClick","showMore","disabled","length","LowerBlockPagination","setCurrentPage","currentPage","count","UserCard","dispatch","useDispatch","slice","map","u","i","userItem","follow","NavLink","to","id","src","photos","small","avatar","alt","userPhoto","concat","followed","followed_unfollow","info","name","stateFollow","stateUnfollow","status","description","UsersContainer","React","getCurrentPage","actions","reqUsers","useState","Math","ceil","searchParams","setSearchParams","useSearchParams","useEffect","parsed","get","actualPage","actualFilter","urlQuery","infoPage"],"sourceRoot":""}